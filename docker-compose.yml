services:
  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_DB: backend
      POSTGRES_USER: backend
      POSTGRES_PASSWORD: backend
    ports:
      - "5432:5432"
    networks:
      - backend-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U backend" ]
      interval: 5s
      timeout: 3s
      retries: 5

  redis:
    image: redis:6
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - redis_data:/data
    networks:
      - backend-network

  backend:
    build:
      context: ./funtech_project
    container_name: backend
    ports:
      - "8000:8000"
    environment:
      DB_NAME: backend
      DB_USER: backend
      DB_PASSWORD: backend
      DB_HOST: postgres
      DB_PORT: 5432
    depends_on:
      - postgres
      - redis
    networks:
      - backend-network

  celery_worker:
    build:
      context: ./funtech_project
    container_name: celery_worker
    command: >
      bash -c "python -c 'import time, redis; r = redis.Redis(host=\"redis\", port=6379); [time.sleep(2) for _ in range(10) if not r.ping()]' && celery -A backend worker --loglevel=info"

    environment:
      DB_NAME: backend
      DB_USER: backend
      DB_PASSWORD: backend
      DB_HOST: postgres
      DB_PORT: 5432
      CELERY_BROKER_URL: redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - backend-network

  celery_beat:
    build:
      context: ./funtech_project
    container_name: celery_beat
    command: celery -A backend beat --loglevel=info
    environment:
      DB_NAME: backend
      DB_USER: backend
      DB_PASSWORD: backend
      DB_HOST: postgres
      DB_PORT: 5432
      CELERY_BROKER_URL: redis://redis:6379/0
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - backend-network


volumes:
  postgres_data:
  redis_data:

networks:
  backend-network:
